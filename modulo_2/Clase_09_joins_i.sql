-- ***********************************************************************************
--  Uniendo Tablas en SQL (Joins I) üåü
--  Hoy nos enfocaremos en un tema esencial en el an√°lisis de datos: las JOINs.
--  Imaginemos que tenemos informaci√≥n distribuida en varias tablas de nuestra base
--  de datos 'tienda', como la lista de nuestros clientes y los pedidos que han
--  realizado.
--  ¬øC√≥mo combinamos esta informaci√≥n para obtener una vista completa y √∫til?
--  Aqu√≠ es donde las JOINs nos asisten, permiti√©ndonos consolidar datos de
--  diferentes tablas para obtener una vista completa y √∫til.
--  En esta sesi√≥n, exploraremos 3 tipos fundamentales de JOINs:
--  1. Cross Join
--  2. Natural Join
--  3. Inner Join
--  Cada una tiene un prop√≥sito distinto y comprenderlas nos permitir√° manipular
--  los datos para extraer exactamente lo que necesitamos.
-- ***********************************************************************************


-- ***********************************************************************************
--  1. Cross Join ‚ú®
-- ***********************************************************************************
-- Un Cross Join, tambi√©n conocido como producto cartesiano, combina cada fila de
-- una tabla con cada fila de otra tabla. Es como si cada persona en una
-- fiesta hablara con todas las dem√°s.
-- A diferencia de otros tipos de JOINs, el Cross Join no necesita que las filas
-- de las tablas coincidan en alguna columna.
-- Esto puede generar una gran cantidad de resultados. Por ejemplo, si una
-- tabla tiene 100 filas y la otra 200, obtendr√°s 20,000 combinaciones.
-- Por ello, debe usarse con precauci√≥n.
-- A menudo, necesitaremos a√±adir una condici√≥n con la cl√°usula WHERE para
-- filtrar solo las combinaciones que nos interesan y que tengan sentido
-- para el an√°lisis.

-- Sintaxis b√°sica:
-- SELECT columna1, columna2, ...
-- FROM tabla1
-- CROSS JOIN tabla2;

/*
Casos de uso comunes : Aunque el Cross Join crea todas las combinaciones posibles, 
rara vez se usa directamente sin una cl√°usula WHERE en un entorno de producci√≥n. 
Su uso principal suele ser para generar conjuntos de datos de prueba, simular todas las posibles relaciones entre dos entidades o, 
servir como base para otras operaciones. 
Tambi√©n puede ser √∫til para calcular todas las combinaciones posibles de √≠tems.

Implicaciones de rendimiento: Es crucial reiterar y quiz√°s expandir la advertencia sobre el gran n√∫mero de resultados. 
Un Cross Join es computacionalmente costoso si las tablas son grandes, ya que el n√∫mero de filas en el resultado 
es el producto del n√∫mero de filas de cada tabla. Esto puede llevar a problemas de rendimiento severos y un consumo 
excesivo de memoria si no se maneja con cuidado.
*/


-- Ejemplo 1: Combinar cada l√≠nea de producto con cada producto disponible.
-- Esto crear√° todas las combinaciones posibles, incluso si el producto no
-- pertenece realmente a esa l√≠nea de producto.
-- Fijaros que tenemos 7 filas para las categorias y 110 para los productos. 
-- El resultado del CROSS JOIN deber√≠a devolvernos 770 filas.

SELECT pl.product_line, p.product_name
FROM product_lines AS pl
CROSS JOIN products AS p;



-- Ejemplo 2: Un Cross Join para mostrar todas las posibles asignaciones
-- de un empleado a una oficina, sin importar si realmente trabajan all√≠.
-- Esto es √∫til para generar listas exhaustivas de posibilidades.

SELECT e.first_name, e.last_name, o.city, o.country
FROM employees e
CROSS JOIN offices o;


-- Ejemplo 3 con WHERE para filtrar resultados relevantes
-- Se puede usar WHERE para filtrar combinaciones y obtener solo aquellas que realmente tienen una relaci√≥n.
-- Aqu√≠, estamos combinando productos y l√≠neas de productos, y luego filtrando
-- para mostrar solo las combinaciones donde el 'product_line' de ambas tablas coincide. 
-- Esto es lo que har√≠a un Inner Join si las columnas tuvieran el mismo nombre.

SELECT pl.product_line, p.product_name
FROM product_lines AS pl
CROSS JOIN products AS p
WHERE pl.product_line = p.product_line;



-- ***********************************************************************************
--  2. Natural Join
-- ***********************************************************************************
-- El Natural Join es una operaci√≥n muy intuitiva. Busca autom√°ticamente
-- columnas con el mismo nombre y tipo de dato en ambas tablas y las usa para combinar los datos.
-- Si ambas tablas tienen una columna llamada, por ejemplo, 'customer_number', el
-- Natural Join las combinar√° bas√°ndose en esa columna.
-- Este tipo de join es muy c√≥modo cuando las tablas est√°n bien dise√±adas.

-- Sin embargo, ¬°ojo con las limitaciones! Aunque es pr√°ctico, hay que tener
-- cuidado. Si los nombres de las columnas cambian en el futuro,
-- podr√≠amos obtener resultados inesperados o unir cosas que no quer√≠amos.
-- El Natural Join fusiona las columnas duplicadas autom√°ticamente, mostrando la 
-- columna com√∫n solo una vez en el resultado.

-- Sintaxis:
-- SELECT columna1, columna2, ...
-- FROM tabla1
-- NATURAL JOIN tabla2;

/*
Riesgos en bases de datos grandes: La mayor desventaja del NATURAL JOIN es su "magia" autom√°tica. 
Si se a√±ade una nueva columna con un nombre existente en ambas tablas a cualquiera de las dos tablas en el futuro, 
el NATURAL JOIN podr√≠a accidentalmente unirse sobre esa nueva columna, llevando a resultados incorrectos sin previo aviso o 
cambio expl√≠cito en la consulta. Por esta raz√≥n, muchos desarrolladores de bases de datos y DBAs prefieren evitar el 
NATURAL JOIN en favor del INNER JOIN con cl√°usulas ON o USING expl√≠citas, que son m√°s robustas y predecibles.

Forma compacta de uni√≥n: Aunque es arriesgado, es la forma m√°s concisa de realizar una uni√≥n si las columnas de uni√≥n 
tienen exactamente el mismo nombre y significado en ambas tablas, y no hay otras columnas con nombres id√©nticos 
que no deban ser parte de la condici√≥n de uni√≥n.
*/




-- Ejemplo 1: Unir la tabla 'employees' y 'offices' para ver los detalles de los
-- empleados junto con la ciudad de su oficina. Ambas tablas tienen una columna
-- llamada 'office_code'.

SELECT e.first_name, e.last_name, o.city, o.country
FROM employees AS e
NATURAL JOIN offices AS o;


-- Ejemplo 2: Unir la tabla 'orders' y 'customers' para ver los pedidos junto con
-- el nombre del cliente. Ambas tablas tienen una columna llamada 'customer_number'.

SELECT o.order_number, o.order_date, c.customer_name
FROM orders As o
NATURAL JOIN customers AS c;


-- Ejemplo 3: Unir la tabla 'order_details' y 'products' para ver los productos
-- pedidos y sus nombres. Ambas tablas tienen 'product_code'.
SELECT od.order_number, p.product_name, od.quantity_ordered
FROM order_details od
NATURAL JOIN products p;


-- ***********************************************************************************
--  3. Inner Join 
-- ***********************************************************************************
-- El Inner Join es probablemente el tipo de JOIN m√°s utilizado.
-- Solo devuelve las filas que tienen coincidencias en ambas tablas.
-- En otras palabras, solo veremos los datos que est√°n presentes en ambas tablas
-- y cumplen con la condici√≥n de uni√≥n.
-- Es como el Natural Join, pero con una gran ventaja: nos permite enlazar tablas
-- incluso si las columnas que estamos utilizando para la uni√≥n NO tienen el mismo
-- nombre. Para lograr esto, utilizamos la palabra reservada ON.
-- Si un registro en una tabla no tiene una coincidencia en la otra, ese registro
-- no aparecer√° en el resultado.
-- El resultado de un Inner Join contiene todas las columnas originales, incluso
-- si se llaman igual en ambas tablas (a diferencia del Natural Join que las fusiona).
-- No devolver√° registros que sean NULL en las columnas de uni√≥n en ambas tablas.

-- Sintaxis b√°sica con ON:
-- SELECT tabla1.columna1, tabla2.columnaX, ...
-- FROM tabla1
-- INNER JOIN tabla2 ON tabla1.columna_join = tabla2.columna_join;

-- Ejemplo 1: Queremos ver los nombres de los clientes y el nombre de su representante
-- de ventas. La tabla 'customers' tiene 'sales_rep_employee_number' y 'employees'
-- tiene 'employee_number'. Natural Join no funcionar√≠a directamente aqu√≠ debido
-- a los diferentes nombres de columna, pero Inner Join es perfecto.
SELECT c.customer_name AS cliente, e.first_name AS nombre_rep_ventas, e.last_name AS apellido_rep_ventas
FROM customers AS c
INNER JOIN employees AS e ON c.sales_rep_employee_number = e.employee_number;


-- Ejemplo 2: Ver los detalles de los pedidos y los productos que contienen.
-- Unimos 'orders' con 'order_details' y 'order_details' con 'products'.
-- Aqu√≠ 'order_number' y 'product_code' son los puntos de uni√≥n.

SELECT o.order_number, o.order_date, p.product_name, od.quantity_ordered, od.price_each
FROM orders AS o
INNER JOIN order_details AS od ON o.order_number = od.order_number
INNER JOIN products AS p ON od.product_code = p.product_code;


-- Ejemplo 3: Listar los productos y sus l√≠neas de producto correspondientes.
-- La columna de uni√≥n 'product_line' tiene el mismo nombre en ambas tablas,
-- pero con INNER JOIN ON, la explicitamos.
SELECT p.product_name, pl.product_line, pl.text_description
FROM products AS p 
INNER JOIN product_lines AS pl ON p.product_line = pl.product_line;


-- Uso de INNER JOIN con el operador USING:
-- El operador USING permite especificar una columna de uni√≥n sin tener que
-- calificarla con el nombre de la tabla, ya que asume que las columnas tienen
-- el mismo nombre en ambas tablas. Esto hace que las consultas sean m√°s
-- concisas y legibles.

-- Sintaxis b√°sica del INNER JOIN con el operador USING:
-- SELECT columnas
-- FROM tabla1
-- INNER JOIN tabla2 USING (columna_comun);

-- Ejemplo 4 con USING: Unir 'employees' y 'offices' usando 'office_code'.
-- Esto producir√° un resultado similar al Natural Join si 'office_code' es la
-- √∫nica columna en com√∫n, pero con la diferencia de que controlamos qu√©
-- columnas se usan para la uni√≥n.
SELECT
    e.first_name,
    e.last_name,
    o.city AS office_city
FROM
    employees e
INNER JOIN
    offices o USING (office_code);




-- ***********************************************************************************
--  Reflexiones finales:
-- ***********************************************************************************
-- Hoy hemos aprendido a combinar datos de diferentes tablas utilizando los
-- JOINs. Esta es una habilidad fundamental en SQL para obtener informaci√≥n
-- m√°s completa y significativa.
-- Hemos cubierto:
-- *   Cross Join: Para todas las combinaciones posibles, √∫til con filtros.
-- *   Natural Join: Para uniones autom√°ticas por nombre de columna, conveniente
--                  pero requiere cuidado con el dise√±o de la base de datos.
-- *   Inner Join: El m√°s com√∫n, une solo donde hay coincidencias, ofreciendo
--                 flexibilidad con la cl√°usula ON o concisi√≥n con USING.
-- La importancia de las coincidencias: Recuerden que el INNER JOIN solo incluir√°
-- registros que tienen coincidencias en ambas tablas.
-- Flexibilidad: El INNER JOIN nos permite usar columnas que no se llaman igual,
-- lo que nos da mayor libertad al trabajar con nuestros datos.
-- ***********************************************************************************










