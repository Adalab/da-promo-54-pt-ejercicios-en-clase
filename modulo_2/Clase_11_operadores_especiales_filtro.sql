-- ***********************************************************************************
--  Hoy nos enfocaremos en descubrir patrones y conexiones en nuestros datos, 
--  lo que nos ayudar√° a tomar decisiones informadas basadas en informaci√≥n real.
--  Aprenderemos sobre combinar y filtrar datos de manera m√°s eficiente en SQL.
--  Dominaremos herramientas poderosas como UNION, UNION ALL, IN, NOT IN, LIKE, NOT LIKE y REGEX.
-- ***********************************************************************************


-- ***********************************************************************************
--  1. UNION üîó
-- ***********************************************************************************

-- La operaci√≥n UNION es una forma s√∫per √∫til de combinar los resultados de dos o m√°s consultas en un solo conjunto de datos.
-- Lo m√°s genial de todo es que no solo junta los datos, sino que tambi√©n elimina autom√°ticamente cualquier duplicado,
-- ofreci√©ndonos una lista √∫nica y ordenada.
-- Imagina que tienes dos listas y quieres una lista combinada sin elementos repetidos. ¬°Esa es la idea!

-- Para que UNION funcione correctamente, ambas consultas deben tener:
-- - El mismo n√∫mero de columnas.
-- - Los mismos tipos de datos en esas columnas (por ejemplo, si en la primera consulta est√°s obteniendo ciudades,
--   en la segunda tambi√©n deben ser ciudades, no n√∫meros ni fechas).
-- - La primera consulta ser√° la que decida el orden de los resultados finales si no se especifica un ORDER BY final.

-- Sintaxis b√°sica de UNION:
-- SELECT columnas FROM tabla1 UNION SELECT columnas FROM tabla2;

-- Ejemplo 1: Obtener la lista de todos los pa√≠ses √∫nicos donde tenemos clientes y oficinas.
-- Usaremos la tabla `customers` y la tabla `offices` de la base de datos `tienda`.
SELECT
    country -- Seleccionamos la columna 'country' de la tabla 'customers'
FROM
    customers -- Desde la tabla 'customers'
UNION -- Combinamos los resultados, eliminando duplicados
SELECT
    country -- Seleccionamos la columna 'country' de la tabla 'offices'
FROM
    offices; -- Desde la tabla 'offices'

-- Explicaci√≥n del resultado del Ejemplo 1:
-- Al ejecutar esta consulta, obtendremos una lista de valores √∫nicos de pa√≠ses
-- que aparecen en ambas tablas (`customers` y `offices`).
-- UNION eliminar√° autom√°ticamente los pa√≠ses duplicados, as√≠ que veremos cada pa√≠s solo una vez.


-- Ejemplo 2: Obtener la lista de todas las ciudades √∫nicas de clientes y oficinas.
-- Es importante que las columnas tengan tipos de datos compatibles. Ambas columnas `city` son de tipo `VARCHAR`.
SELECT
	city -- Seleccionamos la columna 'city' de la tabla 'customers'
FROM
    customers -- Desde la tabla 'customers'
UNION -- Combinamos los resultados, eliminando duplicados
SELECT
    city -- Seleccionamos la columna 'city' de la tabla 'offices'
FROM
    offices; -- Desde la tabla 'offices'

-- Explicaci√≥n del resultado del Ejemplo 2:
-- Esta consulta nos dar√° una lista de todas las ciudades √∫nicas donde tenemos clientes o donde se encuentran nuestras oficinas.


-- ***********************************************************************************
--  2. UNION ALL üìö
-- ***********************************************************************************

-- UNION ALL es una operaci√≥n s√∫per √∫til cuando queremos combinar resultados de varias consultas
-- y no nos importa si hay valores duplicados.
-- Es ideal cuando queremos todos los resultados, sin eliminar nada.
-- La sentencia UNION ALL en MySQL nos permite combinar los resultados de dos o m√°s consultas,
-- manteniendo todos los registros, incluso si hay duplicados.
-- Esto la diferencia de UNION, que elimina autom√°ticamente los duplicados.

-- Sintaxis b√°sica de UNION ALL:
-- SELECT columnas FROM tabla1 UNION ALL SELECT columnas FROM tabla2;

-- Ejemplo 1: Obtener la lista de todos los pa√≠ses de clientes y oficinas, incluyendo duplicados.
-- Usaremos las mismas tablas `customers` y `offices` para mostrar la diferencia con UNION.
SELECT
    country -- Seleccionamos la columna 'country' de la tabla 'customers'
FROM
    customers -- Desde la tabla 'customers'
UNION ALL -- Combinamos todos los resultados, manteniendo duplicados
SELECT
    country -- Seleccionamos la columna 'country' de la tabla 'offices'
FROM
    offices; -- Desde la tabla 'offices'

-- Explicaci√≥n del resultado del Ejemplo 1:
-- Al ejecutar esta consulta, veremos todos los pa√≠ses, incluyendo aquellos que se repiten
-- en ambas tablas (`customers` y `offices`).


-- Ejemplo 2: Obtener la lista de todas las ciudades de clientes y oficinas, incluyendo duplicados.
SELECT
    city -- Seleccionamos la columna 'city' de la tabla 'customers'
FROM
    customers -- Desde la tabla 'customers'
UNION ALL -- Combinamos todos los resultados, manteniendo duplicados
SELECT
    city -- Seleccionamos la columna 'city' de la tabla 'offices'
FROM
    offices; -- Desde la tabla 'offices'

-- Explicaci√≥n del resultado del Ejemplo 2:
-- Esta consulta listar√° todas las ciudades, y si una ciudad aparece en ambas tablas
-- o varias veces en una misma tabla, se mostrar√° tantas veces como aparezca.


-- C√≥mo usar ORDER BY y LIMIT con UNION ALL:
-- Podemos combinar ORDER BY y LIMIT con UNION ALL para ordenar los resultados
-- y limitar cu√°ntos queremos ver. Estas cl√°usulas deben ir al final de toda la consulta.

-- Ejemplo 3: Obtener los primeros 10 pa√≠ses de clientes y oficinas, ordenados alfab√©ticamente, incluyendo duplicados.
SELECT
    country -- Seleccionamos el pa√≠s de la tabla 'customers'
FROM
    customers -- Desde la tabla 'customers'
UNION ALL -- Combinamos todos los resultados, incluyendo duplicados
SELECT
    country -- Seleccionamos el pa√≠s de la tabla 'offices'
FROM
    offices -- Desde la tabla 'offices'
ORDER BY
    country -- Ordenamos los resultados por pa√≠s alfab√©ticamente
LIMIT 10; -- Limitamos la salida a los primeros 10 registros

-- Explicaci√≥n del resultado del Ejemplo 3:
-- Esta consulta devolver√° una lista combinada de los pa√≠ses, ordenados alfab√©ticamente,
-- y se mostrar√°n los primeros 10 de la lista resultante, incluso si hay repeticiones.


-- ***********************************************************************************
--  3. IN ‚úî y NOT IN ‚ùå
-- ***********************************************************************************

-- IN nos permite seleccionar filas donde el valor de una columna coincide
-- con uno de varios valores que le pasamos.
-- Esto es s√∫per √∫til cuando queremos filtrar datos sin tener que escribir varias veces OR.

-- Sintaxis b√°sica de IN:
-- SELECT columnas FROM tabla WHERE columna IN (valor1, valor2, valor3, ...);


-- Ejemplo 1: Seleccionar clientes que son de 'USA' o 'France'.
-- Usaremos la tabla `customers`.
SELECT
    customer_name, -- Seleccionamos el nombre del cliente
    country -- Seleccionamos el pa√≠s del cliente
FROM
    customers -- Desde la tabla 'customers'
WHERE
    country IN ('USA', 'France'); -- Filtramos donde el pa√≠s est√© en la lista ('USA', 'France')

-- Explicaci√≥n del resultado del Ejemplo 1:
-- Esta consulta nos devolver√° los nombres y pa√≠ses de todos los clientes
-- que se encuentran en Estados Unidos o Francia.



-- Ejemplo 2: Seleccionar √≥rdenes con el estado 'Shipped' o 'Disputed'.
-- Usaremos la tabla `orders`.
SELECT
    order_number, -- Seleccionamos el n√∫mero de orden
    status, -- Seleccionamos el estado de la orden
    order_date -- Seleccionamos la fecha de la orden
FROM
    orders -- Desde la tabla 'orders'
WHERE
    status IN ('Shipped', 'Disputed'); -- Filtramos donde el estado sea 'Shipped' o 'Disputed'

-- Explicaci√≥n del resultado del Ejemplo 2:
-- Obtendremos una lista de √≥rdenes que han sido enviadas o que est√°n en estado de disputa.



-- NOT IN nos ayuda a excluir datos f√°cilmente.
-- Con esta sentencia, excluimos los valores que est√°n en una lista.
-- Perfecto cuando queremos centrarnos en datos que no est√°n en una lista espec√≠fica.

-- Sintaxis b√°sica de NOT IN:
-- SELECT columnas FROM tabla WHERE columna NOT IN (valor1, valor2, valor3, ...);


-- Ejemplo 3: Seleccionar clientes que NO son de 'Spain' ni 'Germany'.
-- Usaremos la tabla `customers`.
SELECT
    customer_name, -- Seleccionamos el nombre del cliente
    country -- Seleccionamos el pa√≠s del cliente
FROM
    customers -- Desde la tabla 'customers'
WHERE
    country NOT IN ('Spain', 'Germany'); -- Filtramos donde el pa√≠s NO est√© en la lista ('Spain', 'Germany')

-- Explicaci√≥n del resultado del Ejemplo 3:
-- Esta consulta nos mostrar√° los clientes de cualquier pa√≠s, excepto Espa√±a y Alemania.


-- Ejemplo 4: Seleccionar productos que NO pertenecen a las l√≠neas 'Classic Cars' ni 'Motorcycles'.
-- Usaremos la tabla `products`.
SELECT
    product_name, -- Seleccionamos el nombre del producto
    product_line -- Seleccionamos la l√≠nea de producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_line NOT IN ('Classic Cars', 'Motorcycles'); -- Filtramos donde la l√≠nea de producto NO sea 'Classic Cars' ni 'Motorcycles'

-- Explicaci√≥n del resultado del Ejemplo 4:
-- Obtendremos todos los productos que no son ni coches cl√°sicos ni motocicletas.



-- ***********************************************************************************
--  4. LIKE üåü y NOT LIKE üö´
-- ***********************************************************************************

-- Las cl√°usulas LIKE y NOT LIKE nos permiten buscar patrones dentro de nuestras tablas.
-- Esto es s√∫per pr√°ctico cuando no sabemos el valor exacto que queremos buscar,
-- pero s√≠ tenemos una idea de c√≥mo podr√≠a verse.
-- LIKE nos permite buscar patrones en lugar de coincidencias exactas.
-- NOT LIKE hace lo contrario: nos ayuda a excluir aquellos registros que cumplen con un patr√≥n determinado.
-- No distingue entre may√∫scula y min√∫scula.

-- Sintaxis b√°sica de LIKE:
-- SELECT columnas FROM tabla WHERE columna LIKE 'patron';

-- Comodines en LIKE:
-- - % : Representa cualquier cantidad de caracteres (incluyendo ninguno).
--   Por ejemplo, 'A%' encontrar√° cualquier valor que comience con 'A', sin importar qu√© m√°s venga despu√©s.
-- - _ : Representa exactamente un car√°cter.
--   Si ponemos 'B__', estamos buscando algo que comience con 'B' y tenga exactamente dos caracteres m√°s.


-- Ejemplo 1: Buscar nombres de clientes que empiecen con 'A'.
-- Usaremos la tabla `customers`.
SELECT
    customer_name -- Seleccionamos el nombre del cliente
FROM
    customers -- Desde la tabla 'customers'
WHERE
    customer_name LIKE 'A%'; -- Filtramos donde el nombre del cliente comience con 'A'

-- Explicaci√≥n del resultado del Ejemplo 1:
-- Esta consulta devolver√° todos los clientes cuyo nombre empieza con la letra 'A'.


-- Ejemplo 2: Buscar nombres de productos que contengan la palabra 'Ford'.
-- Usaremos la tabla `products`.
SELECT
    product_name -- Seleccionamos el nombre del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_name LIKE '%Ford%'; -- Filtramos donde el nombre del producto contenga la palabra 'Ford' en cualquier posici√≥n

-- Explicaci√≥n del resultado del Ejemplo 2:
-- Obtendremos una lista de productos que tienen 'Ford' en su nombre,
-- independientemente de si est√° al principio, al final o en medio.


-- Ejemplo 3: Buscar extensiones de empleados que tengan 'x' seguido de tres caracteres.
-- Usaremos la tabla `employees`.
SELECT
    first_name, -- Seleccionamos el nombre del empleado
    last_name, -- Seleccionamos el apellido del empleado
    extension -- Seleccionamos la extensi√≥n del empleado
FROM
    employees -- Desde la tabla 'employees'
WHERE
    extension LIKE 'x___'; -- Filtramos donde la extensi√≥n comience con 'x' y tenga exactamente tres caracteres m√°s

-- Explicaci√≥n del resultado del Ejemplo 3:
-- Esta consulta mostrar√° los empleados cuyas extensiones siguen el patr√≥n 'x' seguido de tres caracteres.


-- Sintaxis b√°sica de NOT LIKE:
-- SELECT columna1, columna2, ... FROM tabla WHERE columna NOT LIKE 'patron';



-- Ejemplo 4: Excluir productos cuyos nombres empiecen con '19'.
-- Usaremos la tabla `products`.
SELECT
    product_name -- Seleccionamos el nombre del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_name NOT LIKE '19%'; -- Excluimos los productos cuyo nombre comienza con '19'

-- Explicaci√≥n del resultado del Ejemplo 4:
-- Obtendremos todos los nombres de productos excepto aquellos que comienzan con "19".


-- Ejemplo 5: Excluir empleados cuyo email contenga 'classicmodelcars.com'.
-- Usaremos la tabla `employees`.
SELECT
    first_name, -- Seleccionamos el nombre del empleado
    last_name, -- Seleccionamos el apellido del empleado
    email -- Seleccionamos el email del empleado
FROM
    employees -- Desde la tabla 'employees'
WHERE
    email NOT LIKE '%classicmodelcars.com%'; -- Excluimos los emails que contienen 'classicmodelcars.com'

-- Explicaci√≥n del resultado del Ejemplo 5:
-- Esta consulta mostrar√° los empleados cuyos correos electr√≥nicos no pertenecen
-- al dominio 'classicmodelcars.com'.




-- Ejemplo 6: Buscar descripciones de productos que contengan un signo de porcentaje literal.
-- Usaremos la columna `product_description` en `products`.
-- Asumimos que algunas descripciones podr√≠an contener texto como "50% de descuento".
SELECT
    product_name, -- Seleccionamos el nombre del producto
    product_description -- Seleccionamos la descripci√≥n del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_description LIKE '%\%%'; -- Buscamos descripciones que contengan un '%' literal

-- Explicaci√≥n del resultado del Ejemplo 6:
-- Esta consulta encontrar√° productos en cuya descripci√≥n aparezca el s√≠mbolo literal de porcentaje.



-- ***********************************************************************************
--  5. REGEX üîç
-- ***********************************************************************************
-- Las expresiones regulares, o REGEX, en SQL son una herramienta poderosa que te permite buscar y filtrar datos bas√°ndose 
-- en patrones complejos, yendo m√°s all√° de las capacidades de `LIKE`. 
-- Te permiten definir reglas espec√≠ficas para encontrar caracteres o combinaciones dentro de tus columnas.

-- Cu√°ndo usar REGEX:
-- - Cuando queramos encontrar correos electr√≥nicos que contienen ciertos dominios.
-- - Cuando las cadenas de texto comiencen, terminen o contengan letras o palabras espec√≠ficas.
-- - ¬°Y muchas otras cosas m√°s!

-- Sintaxis b√°sica de REGEX:
-- SELECT columna1, columna2, ... FROM tabla WHERE columna REGEXP 'patron';


-- Operadores clave en REGEX:
-- - . (Punto): Representa cualquier car√°cter individual en la cadena.
-- - * : Coincide con cero o m√°s repeticiones del car√°cter o patr√≥n anterior.
-- - + : Coincide con una o m√°s repeticiones del car√°cter o patr√≥n anterior.
-- - ? : Coincide con cero o una repetici√≥n del car√°cter o patr√≥n anterior.
-- - | (Barra vertical): Funciona como un operador "o" para alternativas.
-- - [] (Corchetes): Permite definir un conjunto de caracteres v√°lidos para una posici√≥n espec√≠fica en la cadena.
-- - [^] (Corchetes con acento circunflejo): Excluye un conjunto de caracteres para una posici√≥n espec√≠fica en la cadena.
-- - () (Par√©ntesis): Agrupa elementos para aplicar operadores a un conjunto completo.
-- - {n} : Coincide exactamente con n repeticiones del car√°cter o patr√≥n anterior.
-- - {n, m} : Coincide con un rango de repeticiones, desde n hasta m, del car√°cter o patr√≥n anterior.
-- - ^ : Marca el inicio de la cadena.
-- - $ : Marca el final de la cadena.


-- Ejemplo 1: Buscar productos cuyo nombre contenga "Ford" o "Chevy".
-- Usaremos la tabla `products`.
SELECT
    product_name -- Seleccionamos el nombre del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_name REGEXP 'Ford|Chevy'; -- Filtramos donde el nombre del producto contenga 'Ford' O 'Chevy'

-- Explicaci√≥n del resultado del Ejemplo 1:
-- Esta consulta encontrar√° todos los productos que mencionan "Ford" o "Chevy" en su nombre.



-- Ejemplo 2: Buscar n√∫meros de tel√©fono de clientes que comiencen con el signo '+'.
-- Usaremos la tabla `customers`.
-- El car√°cter '+' tiene un significado especial en REGEX, por lo que necesita ser escapado con '\\'.
SELECT
    customer_name, -- Seleccionamos el nombre del cliente
    phone -- Seleccionamos el n√∫mero de tel√©fono
FROM
    customers -- Desde la tabla 'customers'
WHERE
    phone REGEXP '^\\+'; -- Filtramos donde el n√∫mero de tel√©fono comience con '+'

-- Explicaci√≥n del resultado del Ejemplo 2:
-- Esta consulta devolver√° los clientes cuyos n√∫meros de tel√©fono son internacionales,
-- es decir, aquellos que empiezan con el s√≠mbolo '+'.




-- Ejemplo 3: Buscar comentarios de √≥rdenes que contengan la palabra "customer" (insensible a may√∫sculas/min√∫sculas).
-- Usaremos la tabla `orders`.
-- `[Cc]` permite que la primera letra sea 'C' o 'c'.
SELECT
    order_number, -- Seleccionamos el n√∫mero de orden
    comments -- Seleccionamos los comentarios de la orden
FROM
    orders -- Desde la tabla 'orders'
WHERE
    comments REGEXP '[Cc]ustomer'; -- Filtramos donde los comentarios contengan 'Customer' o 'customer'

-- Explicaci√≥n del resultado del Ejemplo 3:
-- Se mostrar√°n las √≥rdenes que tienen alg√∫n comentario que menciona la palabra "customer",
-- sin importar si empieza con may√∫scula o min√∫scula.



-- Ejemplo 4: Buscar productos cuyo c√≥digo comience con 'S10' o 'S12'.
-- Usaremos la tabla `products`.
SELECT
    product_name, -- Seleccionamos el nombre del producto
    product_code -- Seleccionamos el c√≥digo del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_code REGEXP '^(S10|S12)'; -- Filtramos donde el c√≥digo del producto comience con 'S10' O 'S12'

-- Explicaci√≥n del resultado del Ejemplo 4:
-- Esta consulta listar√° todos los productos cuyos c√≥digos comienzan con "S10" o "S12".


SELECT
    product_name, -- Seleccionamos el nombre del producto
    product_code -- Seleccionamos el c√≥digo del producto
FROM
    products -- Desde la tabla 'products'
WHERE
    product_code LIKE 'S10%' OR product_code LIKE 'S12%';


